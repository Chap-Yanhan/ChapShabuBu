// history.js
const API_BASE_URL = 'https://shabu-chap-app.onrender.com';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Custom Alert (‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏Å‡∏•‡∏á')
function showCustomAlert(title, message, isError = false) {
  const popup = document.querySelector('.custom-alert-popup');
  document.getElementById('alert-title').textContent = title;
  document.getElementById('alert-message').textContent = message;
  document.getElementById('alert-title').style.color = isError ? '#b71c1c' : '#d81b60';
  
  const buttonsDiv = popup.querySelector('.alert-buttons');
  buttonsDiv.innerHTML = `<button id="alert-ok-btn" class="ok-button">‡∏ï‡∏Å‡∏•‡∏á</button>`;
  
  popup.style.display = 'flex';

  document.getElementById('alert-ok-btn').onclick = () => {
    popup.style.display = 'none';
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Custom Confirm (‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏Å‡∏•‡∏á' ‡πÅ‡∏•‡∏∞ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
function showCustomConfirm(title, message, onConfirm) {
  const popup = document.querySelector('.custom-alert-popup');
  document.getElementById('alert-title').textContent = title;
  document.getElementById('alert-message').textContent = message;
  document.getElementById('alert-title').style.color = '#d81b60';
  
  const buttonsDiv = popup.querySelector('.alert-buttons');
  buttonsDiv.innerHTML = `
    <button id="confirm-ok-btn" class="ok-button">‡∏ï‡∏Å‡∏•‡∏á</button>
    <button id="confirm-cancel-btn" class="cancel-button">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
  `;

  popup.style.display = 'flex';

  document.getElementById('confirm-ok-btn').onclick = () => {
    popup.style.display = 'none';
    onConfirm();
  };

  document.getElementById('confirm-cancel-btn').onclick = () => {
    popup.style.display = 'none';
  };
}


async function loadOrders() {
  try {
    const res = await fetch(`${API_BASE_URL}/orders?status=done`);
    if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
    }
    const orders = await res.json();
    return orders;
  } catch (error) {
    console.error('Error loading orders:', error);
    showCustomAlert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ' + error.message, true); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô showAlertDialog ‡πÄ‡∏õ‡πá‡∏ô showCustomAlert
    return [];
  }
}

async function renderOrders() {
  const list = document.getElementById('order-list');
  const orders = await loadOrders();
  if (orders.length === 0) {
    list.innerHTML = '<div style="text-align:center;color:#888;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</div>';
    return;
  }
  list.innerHTML = '';
  
  const byTable = {};
  orders.forEach(order => {
    if (!byTable[order.table]) {
      byTable[order.table] = [];
    }
    byTable[order.table].push(order);
  });

  Object.entries(byTable).forEach(([table, ordersForTable]) => {
    const div = document.createElement('div');
    div.className = 'order-card';
    div.dataset.table = table;

    let orderDetailsHtml = '<div class="order-details-screen">';
    ordersForTable.forEach(order => {
      orderDetailsHtml += `
        <div>‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(order.time).toLocaleString('th-TH')}</div>
        <ul>${Object.entries(order.items).map(([name, qty]) => `<li>${name} √ó ${qty}</li>`).join('')}</ul>
      `;
    });
    orderDetailsHtml += '</div>';

    const summaryItems = {};
    ordersForTable.forEach(order => {
      Object.entries(order.items).forEach(([name, qty]) => {
        summaryItems[name] = (summaryItems[name] || 0) + qty;
      });
    });
    
    let summaryHtml = '<div class="order-summary-print">';
    summaryHtml += `
      <h3>‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏°‡∏ô‡∏π: ${table}</h3>
      <ul>
        ${Object.entries(summaryItems).map(([name, qty]) => `<li>${name} <span>${qty}</span></li>`).join('')}
      </ul>
      <p style="text-align:center; margin-top: 20px;">-- ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ --</p>
    `;
    summaryHtml += '</div>';

    div.innerHTML = `
      <h3 class="screen-only-title">‡πÇ‡∏ï‡πä‡∏∞: ${table}</h3>
      ${orderDetailsHtml}
      ${summaryHtml}
      <div class="order-card-actions">
        <button class="clear-btn">üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ</button>
        <button class="print-table-button" data-table="${table}">üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ</button>
      </div>
    `;
    list.appendChild(div);

    div.querySelector('.clear-btn').onclick = async () => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ showCustomConfirm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pop-up ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
      showCustomConfirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ' + table + '?', async () => {
        try {
          const res = await fetch(`${API_BASE_URL}/orders?table=${table}&status=done`, { method: 'DELETE' });
          if (!res.ok) {
            const errorData = await res.json();
            showCustomAlert('‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ' + (errorData.error || res.statusText), true);
            return;
          }
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ showCustomAlert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pop-up ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          showCustomAlert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞ ${table} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`);
          renderOrders();
        } catch (error) {
          showCustomAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ' + error.message, true);
        }
      });
    };

    div.querySelector('.print-table-button').onclick = (e) => {
      printTableHistory(e.target.dataset.table);
    };
  });
}

function printTableHistory(tableNumber) {
  const allOrderCards = document.querySelectorAll('.order-card');
  allOrderCards.forEach(card => {
    if (card.dataset.table !== tableNumber) {
      card.classList.add('hide-for-print');
    } else {
      card.classList.remove('hide-for-print');
    }
  });
  window.print();
}

window.addEventListener('DOMContentLoaded', renderOrders);

