// kitchen.js
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏î (‡∏ù‡∏±‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏ß) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)

const API_BASE_URL = 'https://shabu-chap-app.onrender.com';

// --- [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ---
let displayedOrderIds = new Set();
let englishVoice = null; // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
let isInitialLoad = true; // [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

// [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
function loadVoices() {
  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const voices = window.speechSynthesis.getVoices();
  if (voices.length > 0) {
      // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á en-US ‡∏´‡∏£‡∏∑‡∏≠ en-GB
      englishVoice = voices.find(voice => voice.lang === 'en-US' || voice.lang === 'en-GB');
      if (englishVoice) console.log('English voice loaded immediately.');
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πâ‡∏≤)
  window.speechSynthesis.onvoiceschanged = () => {
    const updatedVoices = window.speechSynthesis.getVoices();
    englishVoice = updatedVoices.find(voice => voice.lang === 'en-US' || voice.lang === 'en-GB');
    if (englishVoice) console.log('English voice loaded via event.');
  };
}

// [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î
function speakNotification(message = 'New Order') { // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏π‡∏î
  const currentEnglishVoice = window.speechSynthesis.getVoices().find(voice => voice.lang === 'en-US' || voice.lang === 'en-GB') || englishVoice;

  if ('speechSynthesis' in window && currentEnglishVoice) {
    window.speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(message);
    utterance.voice = currentEnglishVoice; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    utterance.lang = 'en-US'; // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    utterance.rate = 1.0;
    utterance.pitch = 1.0;
    utterance.volume = 1.0;

    window.speechSynthesis.speak(utterance);
  } else {
    console.log('Speech Synthesis or English voice not available. Falling back to alarm sound.');
    playAlarmSound(); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏•‡∏≤‡∏£‡πå‡∏° (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏£‡∏≠‡∏á)
const audioContext = new (window.AudioContext || window.webkitAudioContext)();
function playAlarmSound() {
  if (!audioContext) return;
  if (audioContext.state === 'suspended') { audioContext.resume(); }
  const duration = 0.15, pause = 0.1, volume = 0.3;
  const t = audioContext.currentTime;
  const osc1 = audioContext.createOscillator(), gain1 = audioContext.createGain();
  osc1.connect(gain1); gain1.connect(audioContext.destination);
  osc1.type = 'square'; osc1.frequency.setValueAtTime(1200, t);
  gain1.gain.setValueAtTime(volume, t);
  gain1.gain.exponentialRampToValueAtTime(0.0001, t + duration);
  osc1.start(t); osc1.stop(t + duration);
  const osc2 = audioContext.createOscillator(), gain2 = audioContext.createGain();
  osc2.connect(gain2); gain2.connect(audioContext.destination);
  osc2.type = 'square'; osc2.frequency.setValueAtTime(800, t + duration + pause);
  gain2.gain.setValueAtTime(volume, t + duration + pause);
  gain2.gain.exponentialRampToValueAtTime(0.0001, t + (duration * 2) + pause);
  osc2.start(t + duration + pause); osc2.stop(t + (duration * 2) + pause);
}

// [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function enableAudioAndSpeech() {
  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AudioContext ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á
  if (audioContext && audioContext.state === 'suspended') {
    audioContext.resume();
  }
  
  // "‡∏≠‡∏∏‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á" ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  if ('speechSynthesis' in window) {
    window.speechSynthesis.cancel(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
  }
  
  console.log('Audio/Speech enabled by user interaction.');
  const audioNotice = document.getElementById('audio-notice');
  if (audioNotice) {
    audioNotice.style.display = 'none';
  }
  document.body.removeEventListener('click', enableAudioAndSpeech);
}
document.body.addEventListener('click', enableAudioAndSpeech);


async function loadOrders() {
  try {
    const res = await fetch(`${API_BASE_URL}/orders?status=pending`);
    if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
    }
    return await res.json();
  } catch (error) {
    console.error('Error loading orders:', error);
    document.getElementById('order-list').innerHTML = `<div style="text-align:center;color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${error.message}</div>`;
    return [];
  }
}

async function renderOrders() {
  const list = document.getElementById('order-list');
  const orders = await loadOrders();
  const newOrderIds = new Set(orders.map(o => o.id));

  const hasNewOrder = [...newOrderIds].some(id => !displayedOrderIds.has(id));

  // --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á ---
  // ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  if (hasNewOrder && !isInitialLoad) {
    speakNotification("New Order");
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ID ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  displayedOrderIds = newOrderIds;
  isInitialLoad = false;
  // ------------------------------------

  if (orders.length === 0) {
    list.innerHTML = '<div style="text-align:center;color:#888;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà</div>';
    return;
  }
  list.innerHTML = '';
  orders.forEach(order => {
    const div = document.createElement('div');
    div.className = 'order-card';
    div.innerHTML = `
      <h3>‡πÇ‡∏ï‡πä‡∏∞: ${order.table}</h3>
      <div>‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(order.time).toLocaleString('th-TH')}</div>
      <ul>
        ${Object.entries(order.items).map(([name, qty]) => `<li>${name} √ó ${qty}</li>`).join('')}
      </ul>
      <button class="done-btn">‚úÖ ‡∏Å‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</button>
    `;
    div.querySelector('.done-btn').onclick = async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/orders/${order.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: 'done' })
        });
        if (!res.ok) {
          throw new Error(`Server responded with status: ${res.status}`);
        }
        renderOrders(); 
      } catch (error) {
        console.error('Error updating order status:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
      }
    };
    list.appendChild(div);
  });
}

window.addEventListener('DOMContentLoaded', () => {
    loadVoices(); // [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°

    const notice = document.createElement('div');
    notice.id = 'audio-notice';
    notice.textContent = 'üîä ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô';
    notice.style.cssText = 'position: fixed; bottom: 10px; left: 50%; transform: translateX(-50%); background-color: rgba(0,0,0,0.7); color: white; padding: 10px 20px; border-radius: 20px; z-index: 10001; font-family: Sarabun, sans-serif;';
    document.body.appendChild(notice);

    renderOrders();
});


setInterval(renderOrders, 5000);



