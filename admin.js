// admin.js (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î - DOM Manipulation)
const API_BASE_URL = 'https://chapshabubu.onrender.com';

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helpers (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
function showCustomAlert(title, message, isError = false) {
  const popup = document.querySelector('.custom-alert-popup');
  document.getElementById('alert-title').textContent = title;
  document.getElementById('alert-message').textContent = message;
  document.getElementById('alert-title').style.color = isError ? '#b71c1c' : '#d81b60';
  
  const buttonsDiv = popup.querySelector('.alert-buttons');
  buttonsDiv.innerHTML = `<button id="alert-ok-btn" class="ok-button">‡∏ï‡∏Å‡∏•‡∏á</button>`;
  
  popup.style.display = 'flex';

  document.getElementById('alert-ok-btn').onclick = () => {
    popup.style.display = 'none';
  };
}

function showCustomConfirm(title, message, onConfirm) {
  const popup = document.querySelector('.custom-alert-popup');
  document.getElementById('alert-title').textContent = title;
  document.getElementById('alert-message').textContent = message;
  document.getElementById('alert-title').style.color = '#d81b60';
  
  const buttonsDiv = popup.querySelector('.alert-buttons');
  buttonsDiv.innerHTML = `
    <button id="confirm-ok-btn" class="ok-button">‡∏ï‡∏Å‡∏•‡∏á</button>
    <button id="confirm-cancel-btn" class="cancel-button">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
  `;

  popup.style.display = 'flex';

  document.getElementById('confirm-ok-btn').onclick = () => {
    popup.style.display = 'none';
    onConfirm();
  };

  document.getElementById('confirm-cancel-btn').onclick = () => {
    popup.style.display = 'none';
  };
}

async function checkAuth() {
  const res = await fetch(`${API_BASE_URL}/admin/check-auth`);
  const data = await res.json();
  if (!data.isAuthenticated) {
    window.location.href = 'admin_login.html';
  }
}

// --- [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏°‡∏ô‡∏π 1 ‡πÉ‡∏ö ---
function createMenuCardHTML(item) {
    return `
      <img src="${item.image || 'img/placeholder.png'}" alt="${item.name}" style="${!item.is_available ? 'filter: grayscale(100%);' : ''}">
      <h4>${item.name}</h4>
      <p>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${item.category}</p>
      <div class="menu-card-actions">
        <button class="edit-btn" data-id="${item.id}">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
        <button class="delete-btn" data-id="${item.id}">üóëÔ∏è ‡∏•‡∏ö</button>
      </div>
      <div style="padding: 0 10px;">
          <button 
              class="toggle-btn ${item.is_available ? 'available' : 'unavailable'}" 
              data-id="${item.id}">
              ${item.is_available ? '‚úÖ ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á' : '‚ùå ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î'}
          </button>
      </div>
    `;
}

// --- [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å Event Listeners ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡πÉ‡∏ö ---
function addEventListenersToCard(cardElement) {
    cardElement.querySelector('.edit-btn').onclick = (e) => editMenuItem(e.target.dataset.id);
    cardElement.querySelector('.delete-btn').onclick = (e) => deleteMenuItem(e.target.dataset.id);
    cardElement.querySelector('.toggle-btn').onclick = (e) => toggleAvailability(e.target.dataset.id, e.target);
}


// --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô loadMenu ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢ ---
async function loadMenu() {
  const menuListDiv = document.getElementById('menu-list');
  menuListDiv.innerHTML = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π...';
  try {
    const res = await fetch(`${API_BASE_URL}/api/menu`);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    const menuItems = await res.json();
    
    menuListDiv.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    
    if (menuItems.length === 0) {
      menuListDiv.innerHTML = '<div style="text-align:center; color:#888;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>';
      return;
    }

    menuItems.forEach(item => {
      const menuCard = document.createElement('div');
      menuCard.className = 'menu-card';
      menuCard.dataset.id = item.id; // ‡πÄ‡∏û‡∏¥‡πà‡∏° data-id ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡πà‡∏≤‡∏¢
      menuCard.innerHTML = createMenuCardHTML(item);
      menuListDiv.appendChild(menuCard);
      addEventListenersToCard(menuCard);
    });

  } catch (error) {
    console.error('Error loading menu:', error);
    menuListDiv.innerHTML = `<div style="color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π: ${error.message}</div>`;
  }
}

// --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addOrUpdateMenu ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadMenu() ---
async function addOrUpdateMenu(e) {
  e.preventDefault();
  const form = e.target;
  const id = form.querySelector('#menu-id').value;
  const name = form.querySelector('#menu-name').value;
  const category = form.querySelector('#menu-category').value;
  const imageFile = form.querySelector('#menu-image').files[0];

  const formData = new FormData();
  formData.append('name', name);
  formData.append('category', category);
  if (imageFile) formData.append('image', imageFile);

  const isUpdating = !!id;
  const url = isUpdating ? `${API_BASE_URL}/api/menu/${id}` : `${API_BASE_URL}/api/menu`;
  const method = isUpdating ? 'PUT' : 'POST';

  try {
    const res = await fetch(url, { method, body: formData });
    if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Server error');
    }
    
    const updatedItem = await res.json();

    if (isUpdating) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        const cardToUpdate = document.querySelector(`.menu-card[data-id="${id}"]`);
        if(cardToUpdate) {
            cardToUpdate.innerHTML = createMenuCardHTML(updatedItem.item);
            addEventListenersToCard(cardToUpdate);
        }
    } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà
        const menuListDiv = document.getElementById('menu-list');
        const newMenuCard = document.createElement('div');
        newMenuCard.className = 'menu-card';
        newMenuCard.dataset.id = updatedItem.item.id;
        newMenuCard.innerHTML = createMenuCardHTML(updatedItem.item);
        menuListDiv.appendChild(newMenuCard);
        addEventListenersToCard(newMenuCard);
    }

    showCustomAlert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ô‡∏π "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`);
    form.reset();
    form.querySelector('#menu-id').value = '';
    form.querySelector('#submit-menu-btn').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π';
    form.querySelector('#image-preview').style.display = 'none';

  } catch (error) {
    showCustomAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ: ${error.message}`, true);
  }
}

// --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô editMenuItem ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DOM ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ---
function editMenuItem(id) {
    const card = document.querySelector(`.menu-card[data-id="${id}"]`);
    if (!card) {
        showCustomAlert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', true);
        return;
    }
    const name = card.querySelector('h4').textContent;
    const categoryText = card.querySelector('p').textContent.replace('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ', '');
    const imageSrc = card.querySelector('img').src;

    // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ category value ‡∏à‡∏≤‡∏Å text
    const categorySelect = document.getElementById('menu-category');
    let categoryValue = '';
    for (const option of categorySelect.options) {
        if (option.textContent === categoryText) {
            categoryValue = option.value;
            break;
        }
    }
    
    document.getElementById('menu-id').value = id;
    document.getElementById('menu-name').value = name;
    document.getElementById('menu-category').value = categoryValue;
    document.getElementById('submit-menu-btn').textContent = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç';
    
    const imagePreview = document.getElementById('image-preview');
    imagePreview.src = imageSrc;
    imagePreview.style.display = 'block';
    
    window.scrollTo(0, 0);
}

// --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô deleteMenuItem ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadMenu() ---
function deleteMenuItem(id) {
  showCustomConfirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö', '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ?', async () => {
    try {
        const res = await fetch(`${API_BASE_URL}/api/menu/${id}`, { method: 'DELETE' });
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.error || 'Server error');
        }
        
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        const cardToRemove = document.querySelector(`.menu-card[data-id="${id}"]`);
        if (cardToRemove) cardToRemove.remove();
        
        showCustomAlert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
        showCustomAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ: ${error.message}`, true);
    }
  });
}

// --- [‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Toggle ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ---
async function toggleAvailability(id, buttonElement) {
    try {
        const res = await fetch(`${API_BASE_URL}/api/menu/${id}/toggle-availability`, { method: 'PUT' });
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.error || 'Server error');
        }

        const data = await res.json();
        const { is_available } = data.item;

        const menuCard = buttonElement.closest('.menu-card');
        const img = menuCard.querySelector('img');

        if (is_available) {
            buttonElement.textContent = '‚úÖ ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á';
            buttonElement.className = 'toggle-btn available';
            img.style.filter = '';
        } else {
            buttonElement.textContent = '‚ùå ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î';
            buttonElement.className = 'toggle-btn unavailable';
            img.style.filter = 'grayscale(100%)';
        }
    } catch (error) {
        showCustomAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: ${error.message}`, true);
    }
}


async function handleLogout() {
  const res = await fetch(`${API_BASE_URL}/admin/logout`);
  if (res.ok) {
    window.location.href = 'admin_login.html';
  } else {
    showCustomAlert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ', true);
  }
}

document.getElementById('menu-image').addEventListener('change', function(event) {
    const reader = new FileReader();
    const imagePreview = document.getElementById('image-preview');
    if (event.target.files.length > 0) {
        reader.onload = function(e) {
            imagePreview.src = e.target.result;
            imagePreview.style.display = 'block';
        };
        reader.readAsDataURL(event.target.files[0]);
    } else {
        imagePreview.style.display = 'none';
        imagePreview.src = '#';
    }
});

document.addEventListener('DOMContentLoaded', () => {
  checkAuth();
  loadMenu();
  document.getElementById('menu-form').addEventListener('submit', addOrUpdateMenu);
  document.getElementById('logout-btn').addEventListener('click', handleLogout);
});

